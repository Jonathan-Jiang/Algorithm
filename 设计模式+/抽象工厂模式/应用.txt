提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类

工厂类提供了每个种类的抽象产品的生产接口(函数)

对于有多个产品，每个产品又有不同的实现(比如单核 CPU 和双核 CPU 这两大类，而这两大类又分别由不同的厂商生产，比如 intel 的 单核、双核 CPU，AMD 的单核、双核 CPU)，我们在抽象工厂接口中，包含所有产品创建的抽象方法。在运行时刻，再创建一个特定的工厂类实例，这个工厂类实例再创建具有特定实现的产品对象，也就是说，为创建不同的产品对象，客户端应使用不同的具体工厂。

好处：
1. 易于交换产品系列，由于具体工厂类，例如 IFactory factory = new AccessFactory() 在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，它只需要改变具体工厂即可使用不同的产品配置
2. 它让具体的创建实例过程与客户端分离，客户端是通过它们的抽象接口操纵实例，产品的具体类名也被具体工厂的实例分离，不会出现在客户代码中